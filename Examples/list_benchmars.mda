class Person {
    init(age) {
        this.age = age;
    }
}

fun benchmark(label, code) {
    var startTime = clock();
    code();
    var endTime = clock();
    print "'" + label + "' took " + (endTime - startTime) + "ms";
}

fun makeList() {
    var result = [];
    for (var i = 0; i < 100000; i++)
        result.push(i % 8);
    return result;
}

fun makePersonList(n) {
    var result = [];
    for (var i = 0; i < n; i++)
        result.push(Person(i));
    return result;
}

fun filterFn(el) {
    return el % 2 == 0;
}

fun filter() {
    var list = makeList();
    var result = list.filter(filterFn);
}

fun filterManual() {
    var list = makeList();
    var result = [];
    for (var i = 0; i < list.length(); i++) {
        var el = list[i];
        if (filterFn(el))
            result.push(el);
    }
}

fun filterOld() {
    var list = makeList();
    var result = [];
    for (var i = 0; i < list.length(); i++) {
        var el = list[i];
        if (el % 2 == 0)
            result.push(el);
    }
}


benchmark("filter", filter);
benchmark("filterManual", filterManual);
benchmark("filterOld", filterOld);


fun sort() {
    var list = makeList();
    list.sort();
}


fun bubble() {
    var list = makeList();
    
    for (var i = 0; i < list.length(); i++) {
        for (var j = i + 1; j < list.length(); j++) {
            if (list[i] > list[j]) {
                var tmp = list[i];
                list[i] = list[j];
                list[j] = tmp;
            }
        }
    }
}

fun heapsort() {
    fun heapify(arr, i, n) {
        var largest = i;
        var l = 2 * i + 1;
        var r = 2 * i + 2;
        if (l < n and arr[l] > arr[largest])
            largest = l;
        if (r < n and arr[r] > arr[largest])
            largest = r;
        if (largest != i) {
            var tmp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = tmp;
            heapify(arr, largest, n);
        }
    }
    var list = makeList();
    var n = list.length();
    for (var i = n / 2 - 1; i >= 0; i--) {
        heapify(list, i, n);
    }
    for (var i = n - 1; i >= 0; i--) {
        var tmp = list[0];
        list[0] = list[i];
        list[i] = tmp;
        heapify(list, 0, i);
    }
}

fun mergeSort(arr, left, right) {
    if (left < right) {
        var middle = (left + right) / 2;
        middle = middle - (middle % 1);
        if (middle < 0)
            middle = 0;
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }
}

fun merge(arr, left, middle, right) {
    var n1 = middle - left + 1;
    var n2 = right - middle;
    
    // Temporary arrays
    var L = [];
    var R = [];
    
    // Populate L
    for (var i = 0; i < n1; i++) {
        L.push(arr[left + i]);
    }
    
    // Populate R
    for (var j = 0; j < n2; j++) {
        R.push(arr[middle + 1 + j]);
    }
    
    // Merge temporary arrays back into arr
    var i = 0;  // Initial index for L
    var j = 0;  // Initial index for R
    var k = left;  // Initial index for merged array

    // Compare and merge elements from L and R
    while (i < n1 and j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    // Copy remaining elements of L, if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    // Copy remaining elements of R, if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}


fun benchMergeSort() {
    var list = makeList();
    mergeSort(list, 0, list.length() - 1);
}

fun partition(l, low, high) {
    var pivot = l[high];
    
    var i = low - 1;
    for (var j = low; j < high; j++) {
        if (l[j] < pivot) {
            i++;
            var tmp = l[i];
            l[i] = l[j];
            l[j] = tmp;
        }
    }
    var tmp = l[i + 1];
    l[i + 1] = l[high];
    l[high] = tmp;
    return i + 1;
}

fun quickSort(arr, low, high) {
    if (low < high) {
        var pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

fun benchQuickSort() {
    var list = makeList();
    quickSort(list, 0, list.length() - 1);
}

fun customSort() {
    var list = makeList();
    fun sortFn(a, b) {
        return b - a;
    }
    list.customSort(sortFn);
}

fun customPersonSort() {
    var list = makePersonList(1000);
    fun sortFn(a, b) {
        return b.age - a.age;
    }
    
    list.customSort(sortFn);
}

benchmark("sort", sort);
benchmark("heapsort", heapsort);
benchmark("mergeSort", benchMergeSort);
benchmark("quickSort", benchQuickSort);
benchmark("customSort", customSort);
benchmark("bubble", bubble);
benchmark("customPersonSort", customPersonSort);

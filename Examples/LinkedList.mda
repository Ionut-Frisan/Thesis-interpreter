
class Node {
    init(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    init() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    
    push(value) {
        var newNode = Node(value);
        if (this.head === null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }
    
    pop() {
        if (this.length === 0) return null;
        
        var current = this.head;
        var newTail = current;
        
        while (current.next) {
            newTail = current;
            current = current.next;
        }
        
        this.tail = newTail;
        this.tail.next = null;
        this.length--;
        
        if (this.length === 0) {
            this.head = null;
            this.tail = null;
        }
        
        return current;
    }
    
    search(value) {
        var current = this.head;
        while (current) {
            if (current.value === value) return current;
            current = current.next;
        }
        return null;
    }
    
    remove(value) {
        var current = this.head;
        var previous = null;
        while (current) {
            if (current.value === value) {
                if (previous) {
                    previous.next = current.next;
                } else {
                    this.head = current.next;
                }
                this.length--;
                return current;
            }
            previous = current;
            current = current.next;
        }
        return null;
    }
    
    insertAt(index, value) {
        if (index > this.length) return false;
        if (index === this.length) return !!this.push(value);
        if (index === 0) return !!this.unshift(value);
        
        var newNode = Node(value);
        var current = this.head;
        var previous = null;
        var count = 0;
        
        while (count < index) {
            previous = current;
            current = current.next;
            count++;
        }
        
        previous.next = newNode;
        newNode.next = current;
        this.length++;
        return true;
    }
}

fun makeList() {
    var result = LinkedList();
    for (var i = 0; i < 25; i++)
        result.push(i % 20);
    return result;
}

fun pprint(list) {
    var current = list.head;
    print "[";
    while (current) {
        print current.value + ", ";
        current = current.next;
    }
    print "]";
}

var list = makeList();

list.remove(4);
list.insertAt(2, 8);
pprint(list);

list.push(42);
print list.pop().value;
